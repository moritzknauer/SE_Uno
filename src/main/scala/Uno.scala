package scala

import scala.CardOptions._
import scala.Player


object Uno {

  def main(args: Array[String]): Unit = {
    val student = Player("Your Name")
    println("Hello, " + student.name)

    val card1 = Card(Color.Blue, Value.Zero)
    val card2 = Card(Color.Blue, Value.One)
    val card3 = Card(Color.Blue, Value.One)
    val card4 = Card(Color.Blue, Value.Two)
    val card5 = Card(Color.Blue, Value.Two)
    val card6 = Card(Color.Blue, Value.Three)
    val card7 = Card(Color.Blue, Value.Three)
    val card8 = Card(Color.Blue, Value.Four)
    val card9 = Card(Color.Blue, Value.Four)
    val card10 = Card(Color.Blue, Value.Five)
    val card11 = Card(Color.Blue, Value.Five)
    val card12 = Card(Color.Blue, Value.Six)
    val card13 = Card(Color.Blue, Value.Six)
    val card14 = Card(Color.Blue, Value.Seven)
    val card15 = Card(Color.Blue, Value.Seven)
    val card16 = Card(Color.Blue, Value.Eight)
    val card17 = Card(Color.Blue, Value.Eight)
    val card18 = Card(Color.Blue, Value.Nine)
    val card19 = Card(Color.Blue, Value.Nine)
    val card20 = Card(Color.Blue, Value.DirectionChange)
    val card21 = Card(Color.Blue, Value.DirectionChange)
    val card22 = Card(Color.Blue, Value.Suspend)
    val card23 = Card(Color.Blue, Value.Suspend)
    val card24 = Card(Color.Blue, Value.PlusTwo)
    val card25 = Card(Color.Blue, Value.PlusTwo)
    val card26 = Card(Color.Green, Value.Zero)
    val card27 = Card(Color.Green, Value.One)
    val card28 = Card(Color.Green, Value.One)
    val card29 = Card(Color.Green, Value.Two)
    val card30 = Card(Color.Green, Value.Two)
    val card31 = Card(Color.Green, Value.Three)
    val card32 = Card(Color.Green, Value.Three)
    val card33 = Card(Color.Green, Value.Four)
    val card34 = Card(Color.Green, Value.Four)
    val card35 = Card(Color.Green, Value.Five)
    val card36 = Card(Color.Green, Value.Five)
    val card37 = Card(Color.Green, Value.Six)
    val card38 = Card(Color.Green, Value.Six)
    val card39 = Card(Color.Green, Value.Seven)
    val card40 = Card(Color.Green, Value.Seven)
    val card41 = Card(Color.Green, Value.Eight)
    val card42 = Card(Color.Green, Value.Eight)
    val card43 = Card(Color.Green, Value.Nine)
    val card44 = Card(Color.Green, Value.Nine)
    val card45 = Card(Color.Green, Value.DirectionChange)
    val card46 = Card(Color.Green, Value.DirectionChange)
    val card47 = Card(Color.Green, Value.Suspend)
    val card48 = Card(Color.Green, Value.Suspend)
    val card49 = Card(Color.Green, Value.PlusTwo)
    val card50 = Card(Color.Green, Value.PlusTwo)
    val card51 = Card(Color.Red, Value.Zero)
    val card52 = Card(Color.Red, Value.One)
    val card53 = Card(Color.Red, Value.One)
    val card54 = Card(Color.Red, Value.Two)
    val card55 = Card(Color.Red, Value.Two)
    val card56 = Card(Color.Red, Value.Three)
    val card57 = Card(Color.Red, Value.Three)
    val card58 = Card(Color.Red, Value.Four)
    val card59 = Card(Color.Red, Value.Four)
    val card60 = Card(Color.Red, Value.Five)
    val card61 = Card(Color.Red, Value.Five)
    val card62 = Card(Color.Red, Value.Six)
    val card63 = Card(Color.Red, Value.Six)
    val card64 = Card(Color.Red, Value.Seven)
    val card65 = Card(Color.Red, Value.Seven)
    val card66 = Card(Color.Red, Value.Eight)
    val card67 = Card(Color.Red, Value.Eight)
    val card68 = Card(Color.Red, Value.Nine)
    val card69 = Card(Color.Red, Value.Nine)
    val card70 = Card(Color.Red, Value.DirectionChange)
    val card71 = Card(Color.Red, Value.DirectionChange)
    val card72 = Card(Color.Red, Value.Suspend)
    val card73 = Card(Color.Red, Value.Suspend)
    val card74 = Card(Color.Red, Value.PlusTwo)
    val card75 = Card(Color.Red, Value.PlusTwo)
    val card76 = Card(Color.Yellow, Value.Zero)
    val card77 = Card(Color.Yellow, Value.One)
    val card78 = Card(Color.Yellow, Value.One)
    val card79 = Card(Color.Yellow, Value.Two)
    val card80 = Card(Color.Yellow, Value.Two)
    val card81 = Card(Color.Yellow, Value.Three)
    val card82 = Card(Color.Yellow, Value.Three)
    val card83 = Card(Color.Yellow, Value.Four)
    val card84 = Card(Color.Yellow, Value.Four)
    val card85 = Card(Color.Yellow, Value.Five)
    val card86 = Card(Color.Yellow, Value.Five)
    val card87 = Card(Color.Yellow, Value.Six)
    val card88 = Card(Color.Yellow, Value.Six)
    val card89 = Card(Color.Yellow, Value.Seven)
    val card90 = Card(Color.Yellow, Value.Seven)
    val card91 = Card(Color.Yellow, Value.Eight)
    val card92 = Card(Color.Yellow, Value.Eight)
    val card93 = Card(Color.Yellow, Value.Nine)
    val card94 = Card(Color.Yellow, Value.Nine)
    val card95 = Card(Color.Yellow, Value.DirectionChange)
    val card96 = Card(Color.Yellow, Value.DirectionChange)
    val card97 = Card(Color.Yellow, Value.Suspend)
    val card98 = Card(Color.Yellow, Value.Suspend)
    val card99 = Card(Color.Yellow, Value.PlusTwo)
    val card100 = Card(Color.Yellow, Value.PlusTwo)
    val card101 = Card(Color.Black, Value.PlusFour)
    val card102 = Card(Color.Black, Value.PlusFour)
    val card103 = Card(Color.Black, Value.PlusFour)
    val card104 = Card(Color.Black, Value.PlusFour)
    val card105 = Card(Color.Black, Value.ColorChange)
    val card106 = Card(Color.Black, Value.ColorChange)
    val card107 = Card(Color.Black, Value.ColorChange)
    val card108 = Card(Color.Black, Value.ColorChange)
    val card109 = Card(Color.Black, Value.Uno)

    val cardsCovered: List[Card] = List()
    val cardsRevealed: List[Card] = List()
    val enemyCarsd: List[Card] = List()
    val handCards: List[Card] = List(card4, card5)

    for(i <- 0 to Color.maxId) {
      for(j <- 0 to Value.maxId) {

      }
    }

    //val cardsCovered: List[Card] = List(card1, card2)
    //val cardsRevealed: List[Card] = List(card3)
    //val cardsRevealed: List[Card] = List(card3, card2)
    //val cardsCovered: List[Card] = List(card1)

    print(handCards)

    printf("\n")
    printf("\n")
    printf("⌜ ‾‾‾‾ ⌝  ⌜ ‾‾‾‾ ⌝  ⌜ ‾‾‾‾ ⌝  ⌜ ‾‾‾‾ ⌝  ⌜ ‾‾‾‾ ⌝  ⌜ ‾‾‾‾ ⌝  ⌜ ‾‾‾‾ ⌝  ⌜ ‾‾‾‾ ⌝\n")
    printf("⎸       ⎹  ⎸      ⎹  ⎸       ⎹  ⎸      ⎹  ⎸       ⎹  ⎸       ⎹  ⎸      ⎹  ⎸       ⎹\n")
    printf("⎸  Uno  ⎹  ⎸  Uno ⎹  ⎸  Uno  ⎹  ⎸  Uno ⎹  ⎸  Uno  ⎹  ⎸  Uno  ⎹  ⎸  Uno ⎹  ⎸  Uno  ⎹\n")
    printf("⎸       ⎹  ⎸      ⎹  ⎸       ⎹  ⎸      ⎹  ⎸       ⎹  ⎸       ⎹  ⎸      ⎹  ⎸       ⎹\n")
    printf("⌞ ____ ⌟  ⌞ ____ ⌟  ⌞ ____ ⌟  ⌞ ____ ⌟  ⌞ ____ ⌟  ⌞ ____ ⌟  ⌞ ____ ⌟  ⌞ ____ ⌟\n")
    printf("\n")
    printf("\n")
    printf("\n")
    printf("                     ⌜ ‾‾‾‾ ⌝                       ⌜ ‾‾‾‾ ⌝\n")
    printf("                     ⎸       ⎹                       ⎸      ⎹\n")
    printf("                     ⎸  UNO  ⎹                       ⎸  R 8 ⎹\n")
    printf("                     ⎸       ⎹                       ⎸      ⎹\n")
    printf("                     ⌞ ____ ⌟                       ⌞ ____ ⌟\n")
    printf("\n")
    printf("\n")
    printf("\n")
    printf("⌜ ‾‾‾‾ ⌝  ⌜ ‾‾‾‾ ⌝  ⌜ ‾‾‾‾ ⌝  ⌜ ‾‾‾‾ ⌝  ⌜ ‾‾‾‾ ⌝  ⌜ ‾‾‾‾ ⌝  ⌜ ‾‾‾‾ ⌝  ⌜ ‾‾‾‾ ⌝\n")
    printf("⎸       ⎹  ⎸      ⎹  ⎸       ⎹  ⎸      ⎹  ⎸       ⎹  ⎸       ⎹  ⎸      ⎹  ⎸       ⎹\n")
    printf("⎸  G 6  ⎹  ⎸  B 2 ⎹  ⎸  Y 9  ⎹  ⎸  S+4 ⎹  ⎸  Y+2  ⎹  ⎸  G S  ⎹  ⎸  R D ⎹  ⎸  SCC  ⎹\n")
    printf("⎸       ⎹  ⎸      ⎹  ⎸       ⎹  ⎸      ⎹  ⎸       ⎹  ⎸       ⎹  ⎸      ⎹  ⎸       ⎹\n")
    printf("⌞ ____ ⌟  ⌞ ____ ⌟  ⌞ ____ ⌟  ⌞ ____ ⌟  ⌞ ____ ⌟  ⌞ ____ ⌟  ⌞ ____ ⌟  ⌞ ____ ⌟\n")
  }
}
